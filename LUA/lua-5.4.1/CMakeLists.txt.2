cmake_minimum_required ( VERSION 3.30 )
project ( lua C )
set ( CMAKE_C_STANDARD 99 )  # 90 99 11 17 23 - defaut for option 'C_STANDARD'
set ( CMAKE_C_STANDARD_REQUIRED True )
# set_property( GLOBAL PROPERTY C_STANDARD 99 )  # no effect, C_STANDARD is a target property

include ( CMakePrintHelpers )  # for debugging

# set ( CFLAGS /sdl )
# set_property( GLOBAL PROPERTY C_STANDARD 99 s)
# include( GenerateExportHeader )
# include ( CMakePrintSystemInformation )

function(dump_cmake_variables)
  get_cmake_property(_variableNames VARIABLES)
  list (SORT _variableNames)
  foreach (_variableName ${_variableNames})
      message(STATUS "${_variableName}=${${_variableName}}")
  endforeach()
endfunction()
# dump_cmake_variables()

# cmake_print_variables(CMAKE_BUILD_TYPE CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)
# cmake_print_variables(CMAKE_C_STANDARD CFLAGS C_STANDARD)
# cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION NOT_EXISTS)
cmake_print_variables( CMAKE_HOME_DIRECTORY )
cmake_print_variables( CMAKE_CACHEFILE_DIR CMAKE_CFG_INTDIR  )
cmake_print_variables( CMAKE_CURRENT_BINARY_DIR CMAKE_BINARY_DIR PROJECT_BINARY_DIR )
cmake_print_variables( CMAKE_SOURCE_DIR CMAKE_CURRENT_SOURCE_DIR PROJECT_SOURCE_DIR )
cmake_print_variables( C_STANDARD C_STANDARD_REQUIRED )

# set ( CMAKE_GENERATOR "NMake Makefiles" CACHE INTERNAL "Generate NMake instead of VS Project." FORCE )
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "")
# https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html
# automatically create .def file with all global symbols found in the input .obj files for a SHARED library
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS YES CACHE BOOL "Export all symbols")

set ( LUA_DIR src.lua CACHE PATH "Where to search Lua sources." )
set ( LUAC_DIR src.luac CACHE PATH "Where to search Luac sources." )

# see makefile
set ( SRC_CORE lapi.c lcode.c lctype.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c
  lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c
  ltm.c lundump.c lvm.c lzio.c )  # ltests.c
set ( SRC_AUX lauxlib.c )
set ( SRC_LIB lbaselib.c ldblib.c liolib.c lmathlib.c loslib.c ltablib.c lstrlib.c
  lutf8lib.c loadlib.c lcorolib.c linit.c )

# generator expressions result is not exactly known at configuration stage, it becomes known only at the build! stage
# message ( STATUS "SRC_CORE $<LIST:TRANSFORM,${SRC_CORE},PREPEND,${LUA_DIR}/>" )
# file will be written only at the end of the configuration stage
# file( GENERATE OUTPUT "debug_GENERATE.txt" CONTENT "SRC_CORE $<LIFST:TRANSFORM,${SRC_CORE},PREPEND,${LUA_DIR}/>\n" )

set ( SRC_LUA ${LUA_DIR}/lua.c )
set ( SRC_LUAC ${LUAC_DIR}/luac.c )

# include_directories ( src ${CMAKE_CURRENT_BINARY_DIR} )
include_directories ( ${LUA_DIR} )

# add_library( cl_options INTERFACE )

# add_compile_definitions ( LUA_BUILD_AS_DLL )
# add_compile_options (/W4 /WX)
add_compile_options ( /W4 )

add_library ( objcore OBJECT $<LIST:TRANSFORM,${SRC_CORE},PREPEND,${LUA_DIR}/> )
add_library ( objaux OBJECT $<LIST:TRANSFORM,${SRC_AUX},PREPEND,${LUA_DIR}/> )
add_library ( objlib OBJECT $<LIST:TRANSFORM,${SRC_LIB},PREPEND,${LUA_DIR}/> )
add_library ( objlua OBJECT ${SRC_LUA} )
add_library ( objluac OBJECT ${SRC_LUAC} )

# target_compile_definitions ( objcore PUBLIC LUA_BUILD_AS_DLL ) # LUA_CORE
# target_compile_definitions ( objlib PUBLIC LUA_BUILD_AS_DLL )  # LUA_LIB _CRT_SECURE_NO_WARNINGS
# generate_export_header( objcore EXPORT_MACRO_NAME LUA_API INCLUDE_GUARD_NAME LUA_BUILD_AS_DLL )
# generate_export_header( objlib EXPORT_MACRO_NAME LUA_API INCLUDE_GUARD_NAME LUA_BUILD_AS_DLL )

get_target_property ( c_std objcore C_STANDARD )
message ( "objcore[C_STANDARD] = ${c_std}" )

# add_library ( liblua $<TARGET_OBJECTS:objcore> $<TARGET_OBJECTS:objaux> $<TARGET_OBJECTS:objlib> )
# set_target_properties ( liblua PROPERTIES OUTPUT_NAME lua54 )

# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY )

add_library ( libluadll SHARED $<TARGET_OBJECTS:objcore> $<TARGET_OBJECTS:objaux> $<TARGET_OBJECTS:objlib> )
# add_library ( libluadll SHARED
#   $<LIST:TRANSFORM,${SRC_CORE},PREPEND,${LUA_DIR}/>
#   $<LIST:TRANSFORM,${SRC_AUX},PREPEND,${LUA_DIR}/>
#   $<LIST:TRANSFORM,${SRC_LIB},PREPEND,${LUA_DIR}/> )
set_target_properties ( libluadll PROPERTIES OUTPUT_NAME lua54 )  # ENABLE_EXPORTS
# target_compile_definitions ( libluadll PRIVATE LUA_BUILD_AS_DLL LUA_LIB )
target_compile_definitions ( libluadll PUBLIC )  # _CRT_SECURE_NO_WARNINGS
# generate_export_header( libluadll EXPORT_MACRO_NAME LUA_API INCLUDE_GUARD_NAME LUA_BUILD_AS_DLL )
# target_compile_features(libluadll PUBLIC c_std_99)

add_executable ( lua $<TARGET_OBJECTS:objlua> )
# add_executable ( lua ${SRC_LUA} )
target_link_libraries ( lua PUBLIC libluadll )

add_executable ( luac ${SRC_LUAC} $<TARGET_OBJECTS:objcore> $<TARGET_OBJECTS:objaux> )
# target_link_libraries ( luac liblua )

install( TARGETS libluadll RUNTIME DESTINATION bin )
install( TARGETS lua RUNTIME DESTINATION bin )
install( TARGETS luac RUNTIME DESTINATION bin )
